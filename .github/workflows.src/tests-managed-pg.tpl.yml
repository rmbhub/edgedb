<% from "tests.inc.yml" import build, calc_cache_key, restore_cache, setup_terraform -%>

<% macro setup_aws_creds() -%>
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
<%- endmacro -%>

<% macro setup_gcp_creds() -%>
    - name: Configure GCP Credentials
      uses: google-github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
<%- endmacro -%>

name: Tests on Managed PostgreSQL

on:
  schedule:
    - cron: "0 3 * * 6"
  workflow_dispatch:
    inputs: {}
  push:
    branches:
      - cloud-test

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    <%- call build() -%>
    - name: Compute cache keys
      run: |
        << calc_cache_key()|indent >>
    <%- endcall %>


  setup-heroku-postgres:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .github/heroku-postgres
    steps:
      << setup_terraform()|indent(2) >>

      - name: Setup Heroku Postgres
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
        run: |
          terraform apply -auto-approve

      - name: Store Terraform state
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: heroku-postgres-tfstate
          path: .github/heroku-postgres/terraform.tfstate
          retention-days: 1

  test-heroku-postgres:
    runs-on: ubuntu-latest
    needs: [setup-heroku-postgres, build]
    steps:
    <<- restore_cache() >>

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Initialize Terraform
      working-directory: .github/heroku-postgres
      run: terraform init

    - name: Restore Terraform state
      uses: actions/download-artifact@v2
      with:
        name: heroku-postgres-tfstate
        path: .github/heroku-postgres

    - name: Get Heroku Postgres DSN
      id: pgdsn
      working-directory: .github/heroku-postgres
      run: |
        terraform output -raw heroku_postgres_dsn

    # Run the test

    - name: Change Heroku Postgres password
      shell: python
      id: passwd
      run: |
        import asyncio, asyncpg, urllib.parse
        async def main():
            dsn = "${{ steps.pgdsn.outputs.stdout }}"
            p = urllib.parse.urlparse(dsn)
            conn = await asyncpg.connect(dsn)
            await conn.execute(f"""\
                ALTER ROLE {p.username} PASSWORD 'test';
            """)
            p = p._replace(netloc=f'{p.username}:test@{p.hostname}')
            print(f'::set-output name=pgdsn::{p.geturl()}')
        asyncio.run(main())

    - name: Test
      env:
        EDGEDB_TEST_BACKEND_VENDOR: heroku-postgres
        EDGEDB_TEST_BACKEND_DSN: ${{ steps.passwd.outputs.pgdsn }}
      run: |
        edb server --bootstrap-only --backend-dsn=$EDGEDB_TEST_BACKEND_DSN --testmode
        edb test -j1 -v --backend-dsn=$EDGEDB_TEST_BACKEND_DSN

  teardown-heroku-postgres:
    runs-on: ubuntu-latest
    needs: test-heroku-postgres
    if: ${{ always() }}
    defaults:
      run:
        working-directory: .github/heroku-postgres
    steps:
      << setup_terraform()|indent(2) >>

      << setup_aws_creds()|indent(2) >>

      - name: Restore Terraform state
        uses: actions/download-artifact@v2
        with:
          name: heroku-postgres-tfstate
          path: .github/heroku-postgres

      - name: Destroy Heroku Postgres
        run: terraform destroy -auto-approve
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}

      - name: Overwrite Terraform state
        uses: actions/upload-artifact@v2
        with:
          name: heroku-postgres-tfstate
          path: .github/heroku-postgres/terraform.tfstate
          retention-days: 1
